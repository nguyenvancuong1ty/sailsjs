{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Json",
    "description": "This is a generated swagger json for your sails project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Users",
      "description": "Sails blueprint actions for the **Users** model"
    },
    {
      "name": "Voucher",
      "description": "Sails blueprint actions for the **Voucher** model"
    }
  ],
  "components": {
    "schemas": {
      "users": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/users-without-required-constraint"
          },
          {
            "required": [
              "userName",
              "email",
              "authorization",
              "password"
            ]
          }
        ]
      },
      "users-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Users**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "uniqueItems": true
          },
          "authorization": {
            "type": "number",
            "format": "double"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "voucher": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/voucher-without-required-constraint"
          },
          {
            "required": [
              "code"
            ]
          }
        ]
      },
      "voucher-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Voucher**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "code": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "requirement": {
            "type": "string"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "paths": {
    "/api/v1/users": {
      "get": {
        "summary": "List Users (find where)",
        "description": "Find a list of **Users** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,userName,email,authorization,password"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,userName,email,authorization,password"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Users** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/users"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "get": {
          "security": [
            {
              "basicAuth": []
            }
          ]
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create new User",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "201": {
            "description": "User created successfully!"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "Create a new User",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "/api/v1/users",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "summary": "/api/v1/login",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/voucher": {
      "get": {
        "summary": "List Voucher (find where)",
        "description": "Find a list of **Voucher** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Voucher"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,code,date,detail,requirement"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,code,date,detail,requirement"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Voucher** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/voucher"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/users/{_id}": {
      "delete": {
        "summary": "/api/v1/users/{_id}",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/users/{username}": {
      "get": {
        "summary": "Get Users",
        "description": "Get Users By UserName",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `username`"
          }
        ],
        "responses": {
          "200": {
            "description": "Get user success!"
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/users/{page}/{limit}": {
      "get": {
        "summary": "/api/v1/users/{page}/{limit}",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "page",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `page`"
          },
          {
            "in": "path",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `limit`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "400": {
            "description": "Bad request...."
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}